// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (
  id, title, description, category, price, discount, quantity_in_stock
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
`

type CreateProductParams struct {
	ID              int32   `json:"id"`
	Title           string  `json:"title"`
	Description     string  `json:"description"`
	Category        string  `json:"category"`
	Price           float32 `json:"price"`
	Discount        float32 `json:"discount"`
	QuantityInStock int32   `json:"quantity_in_stock"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.Exec(ctx, createProduct,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Category,
		arg.Price,
		arg.Discount,
		arg.QuantityInStock,
	)
	return err
}

const listAllProducts = `-- name: ListAllProducts :many
SELECT id, title, description, category, price, discount, quantity_in_stock FROM products
`

func (q *Queries) ListAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Discount,
			&i.QuantityInStock,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByCategory = `-- name: ListProductsByCategory :many
SELECT id, title, description, category, price, discount, quantity_in_stock FROM products
WHERE category = $1
`

func (q *Queries) ListProductsByCategory(ctx context.Context, category string) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProductsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Discount,
			&i.QuantityInStock,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
